generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  name            String
  phoneNumber     String            @unique
  homeNumber      String
  userType        UserType
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  activities      Activity[]
  entries         Entry[]
  notifications   Notification[]
  plates          Plate[]
  temporaryAccess TemporaryAccess[]

  @@index([phoneNumber])
  @@index([userType])
  @@index([createdAt])
}

model Plate {
  id           String      @id @default(uuid())
  plateCode    String
  plateNumber  String
  country      String
  type         PlateType
  status       PlateStatus @default(PENDING)
  expiresAt    DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       String
  approvedById String?
  emirate      String?
  activities   Activity[]
  documents    Document[]
  entries      Entry[]
  approvedBy   Security?   @relation(fields: [approvedById], references: [id])
  user         User        @relation(fields: [userId], references: [id])

  @@unique([plateCode, plateNumber, country, type])
  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([plateCode, plateNumber])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([status, type, expiresAt])
}

model Document {
  id        String   @id @default(uuid())
  type      String
  url       String
  plateId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plate     Plate    @relation(fields: [plateId], references: [id])

  @@index([plateId])
  @@index([type])
}

model Security {
  id             String   @id @default(uuid())
  name           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  approvedPlates Plate[]

  @@index([name])
}

model Entry {
  id        String   @id @default(uuid())
  plateId   String
  userId    String
  type      String
  timestamp DateTime @default(now())
  plate     Plate    @relation(fields: [plateId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([plateId])
  @@index([userId])
  @@index([timestamp])
  @@index([type])
  @@index([userId, timestamp])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@index([userId, read])
}

model Activity {
  id          String   @id @default(uuid())
  type        String
  description String
  timestamp   DateTime @default(now())
  userId      String
  plateId     String
  plate       Plate    @relation(fields: [plateId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([plateId])
  @@index([timestamp])
  @@index([type])
  @@index([userId, timestamp])
}

model SystemConfig {
  id                  String   @id @default(uuid())
  guestAccessDuration Int      @default(12)
  maxPersonalPlates   Int      @default(2)
  updatedAt           DateTime @updatedAt
}

model TemporaryAccess {
  id          String   @id @default(uuid())
  purpose     String
  status      String   @default("ACTIVE")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  country     String
  emirate     String?
  expiresAt   DateTime
  plateCode   String
  plateNumber String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([plateCode, plateNumber])
  @@index([status])
  @@index([expiresAt])
  @@index([createdById])
  @@index([status, expiresAt])
}

enum UserType {
  RESIDENT
  SECURITY
  ADMIN
}

enum PlateType {
  PERSONAL
  GUEST
}

enum PlateStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}
